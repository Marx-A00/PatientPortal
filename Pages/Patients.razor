@page "/patients"
@using PatientPortal.Services
@using PatientPortal.DTOs
@using Pastel
@using System.Drawing
@inject IApiHttpClient ApiHttpClient
@inject ILogger<Patients> Logger

<PageTitle>Patients</PageTitle>

<h3>Patient List</h3>
<AuthorizeView>
    <Authorized>
        <div class="alert alert-info">
            <strong>üöÄ Now using API!</strong> This data comes from your REST API with JWT authentication.
        </div>


        @if (selectedPatient != null)
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h5>Selected Patient</h5>
                    <button @onclick="() => ClearSelectedPatient()">Clear Patient</button>
                </div>
                <div class="card-body">
                    <strong>ID:</strong> @selectedPatient.Id<br />
                    <strong>Name:</strong> @selectedPatient.Name<br />
                    <strong>Age:</strong> @selectedPatient.Age<br />
                    <strong>Email:</strong> @selectedPatient.Email<br />
                </div>
            </div>
        }
        else
        {

            <div class="card mt-3">
                <div class="card-header">
                    <h5>Selected Patient</h5>
                    <button @onclick="() => ClearSelectedPatient()">Clear Patient</button>
                </div>
                <div class="card-body">
                    <p>Please Select a patient</p>
                </div>
            </div>

        }

        @if (patients == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Age</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var patient in patients)
                    {
                        <tr>
                            <td>@patient.Id</td>
                            <td>@patient.Name</td>
                            <td>@patient.Age</td>
                            <td>@patient.Email</td>
                            <td>
                                <button class="btn btn-info btn-sm" @onclick="() => GetSinglePatient(patient.Id)">
                                    üëÅÔ∏è View
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>


        }

    </Authorized>
    <NotAuthorized>
        need 2 sign in cuh
    </NotAuthorized>
</AuthorizeView>
@code {
    private IEnumerable<PatientResponseDto>? patients;
    private PatientResponseDto? selectedPatient;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        try
        {
            errorMessage = null;
            patients = null;
            StateHasChanged();

            patients = await ApiHttpClient.GetAsync<IEnumerable<PatientResponseDto>>("patients");

            Logger.LogInformation("‚úÖ Successfully loaded {Count} patients from API".Pastel(Color.Green), patients?.Count() ?? 0);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Logger.LogError(ex, "‚ùå Error loading patients from API".Pastel(Color.Red));
        }
        finally
        {
            StateHasChanged();
        }
    }
    private async Task GetSinglePatient(int id)
    {
        try
        {
            Logger.LogInformation("üîç Getting single patient {Id} from API".Pastel(Color.Cyan), id);
            selectedPatient = await ApiHttpClient.GetAsync<PatientResponseDto>($"patients/{id}");
            Logger.LogInformation("‚úÖ Successfully loaded patient {Id} from API".Pastel(Color.Green), id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error getting patient {id}: {ex.Message}";
            Logger.LogError(ex, "‚ùå Error getting patient {Id} from API".Pastel(Color.Red), id);

        }
    }
    private void ClearSelectedPatient()
    {
        selectedPatient = null;
        StateHasChanged();
    }
}